name: Optimize, Audit & Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    name: Optimize, Audit, and Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          check-latest: true

      - name: Initialize npm project and install imagemin locally
        run: |
          npm init -y
          npm install --save-dev imagemin-cli imagemin-mozjpeg imagemin-pngquant imagemin-svgo imagemin-gifsicle

      - name: Clear npm cache (optional, for clean installs)
        run: npm cache clean --force

      - name: Install other optimization & audit tools (global)
        run: |
          npm install -g clean-css-cli terser html-minifier-terser lighthouse serve

      # -----------------------------
      # IMAGE OPTIMIZATION (Compress without format change)
      # -----------------------------
      - name: Optimize images
        run: |
          mkdir -p optimized/img
          if [ ! -d "img" ] || [ -z "$(find img -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" -o -iname "*.gif" -o -iname "*.svg" \) 2>/dev/null)" ]; then
            echo "No img directory or no supported image files found. Skipping image optimization."
            exit 0
          fi
          npx imagemin "img/**/*" --out-dir=optimized/img --plugin=mozjpeg --plugin=pngquant --plugin=svgo --plugin=gifsicle --silent

      # -----------------------------
      # CSS MINIFICATION
      # -----------------------------
      - name: Minify CSS
        run: |
          mkdir -p optimized/css
          if [ ! -d "css" ] || [ -z "$(find css -type f -name '*.css' 2>/dev/null)" ]; then
            echo "No CSS files found. Skipping CSS minification."
            exit 0
          fi
          for f in $(find css -type f -name '*.css'); do
            cleancss -o "optimized/$f" "$f"
          done

      # -----------------------------
      # JS MINIFICATION
      # -----------------------------
      - name: Minify JavaScript
        run: |
          mkdir -p optimized/js
          if [ ! -d "js" ] || [ -z "$(find js -type f -name '*.js' 2>/dev/null)" ]; then
            echo "No JS files found. Skipping JS minification."
            exit 0
          fi
          for f in $(find js -type f -name '*.js'); do
            terser "$f" -o "optimized/$f" --compress --mangle
          done

      # -----------------------------
      # HTML MINIFICATION
      # -----------------------------
      - name: Minify HTML
        run: |
          mkdir -p optimized
          if [ -z "$(find . -type f -name "*.html" ! -path "./optimized/*" 2>/dev/null)" ]; then
            echo "No HTML files found. Skipping HTML minification."
            exit 0
          fi
          find . -type f -name "*.html" ! -path "./optimized/*" -exec sh -c '
            for file do
              out="optimized/${file#./}"
              mkdir -p "$(dirname "$out")"
              html-minifier-terser --collapse-whitespace --remove-comments \
                --remove-redundant-attributes --use-short-doctype \
                --minify-css true --minify-js true -o "$out" "$file"
            done
          ' sh {} +

      # -----------------------------
      # RUN LIGHTHOUSE AUDIT
      # -----------------------------
      - name: Start temporary local server
        run: |
          nohup serve optimized -l 8080 > /dev/null 2>&1 &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          sleep 5

      - name: Run Lighthouse audit
        run: |
          mkdir -p lighthouse-report
          lighthouse http://localhost:8080 --output html --output json \
            --output-path=./lighthouse-report/report --quiet \
            --only-categories=performance,accessibility,best-practices,seo

      - name: Stop local server
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            kill $SERVER_PID || true
          fi

      - name: Upload Lighthouse report
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report
          path: lighthouse-report/

      # -----------------------------
      # Upload to GitHub Pages Artifact
      # -----------------------------
      - name: Upload optimized site for deployment
        uses: actions/upload-pages-artifact@v3
        with:
          path: optimized/

  # -----------------------------
  # DEPLOY JOB
  # -----------------------------
  deploy:
    name: Deploy to GitHub Pages
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
